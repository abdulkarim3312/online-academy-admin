/* * Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved. * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license */
.image.image_resized {
	max-width: 100%;
   /* The `<figure>` element for resized images must not use `display:table` as browsers do not support `max-width` for it well. See https://stackoverflow.com/questions/4019604/chrome-safari-ignoring-max-width-in-table/14420691#14420691 for more. Fortunately, since we control the width, there is no risk that the image will look bad. */
	display: block;
	box-sizing: border-box;
}
.image.image_resized img {
   /* For resized images it is the `<figure>` element that determines the image width. */
	width: 100%;
}
.image.image_resized > figcaption {
   /* The `<figure>` element uses `display:block`, so `<figcaption>` also has to. */
	display: block;
}
.ck.ck-editor__editable {
   /* The resized inline image nested in the table should respect its parent size. See https://github.com/ckeditor/ckeditor5/issues/9117. */
}
.ck.ck-editor__editable td .image-inline.image_resized img, .ck.ck-editor__editable th .image-inline.image_resized img {
	max-width: 100%;
}
[dir="ltr"] .ck.ck-button.ck-button_with-text.ck-resize-image-button .ck-button__icon {
	margin-right: var(--ck-spacing-standard);
}
[dir="rtl"] .ck.ck-button.ck-button_with-text.ck-resize-image-button .ck-button__icon {
	margin-left: var(--ck-spacing-standard);
}
.ck.ck-dropdown .ck-button.ck-resize-image-button .ck-button__label {
	width: 4em;
}


/* * Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved. * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license */
.image {
	display: table;
	clear: both;
	text-align: center;
   /* Make sure there is some space between the content and the image. Center image by default. */
   /* The first value should be equal to --ck-spacing-large variable if used in the editor context to avoid the content jumping (See https://github.com/ckeditor/ckeditor5/issues/9825). */
	margin: 0.9em auto;
   /* Make sure the caption will be displayed properly (See: https://github.com/ckeditor/ckeditor5/issues/1870). */
	min-width: 50px;
}
.image img {
   /* Prevent unnecessary margins caused by line-height (see #44). */
	display: block;
   /* Center the image if its width is smaller than the content's width. */
	margin: 0 auto;
   /* Make sure the image never exceeds the size of the parent container (ckeditor/ckeditor5-ui#67). */
	max-width: 100%;
   /* Make sure the image is never smaller than the parent container (See: https://github.com/ckeditor/ckeditor5/issues/9300). */
	min-width: 100%;
}
.image-inline {
   /* * Normally, the .image-inline would have "display: inline-block" and "img {
		width: 100% 
   }
   " (to follow the wrapper while resizing). * Unfortunately, together with "srcset", it gets automatically stretched up to the width of the editing root. * This strange behavior does not happen with inline-flex. */
	display: inline-flex;
   /* While being resized, don't allow the image to exceed the width of the editing root. */
	max-width: 100%;
   /* This is required by Safari to resize images in a sensible way. Without this, the browser breaks the ratio. */
	align-items: flex-start;
   /* When the picture is present it must act as a flex container to let the img resize properly */
   /* When the picture is present, it must act like a resizable img. */
}
.image-inline picture {
	display: flex;
}
.image-inline picture, .image-inline img {
   /* This is necessary for the img to span the entire .image-inline wrapper and to resize properly. */
	flex-grow: 1;
	flex-shrink: 1;
   /* Prevents overflowing the editing root boundaries when an inline image is very wide. */
	max-width: 100%;
}
.ck.ck-editor__editable {
   /* * Inhertit the content styles padding of the <figcaption> in case the integration overrides `text-align: center` * of `.image` (e.g. to the left/right). This ensures the placeholder stays at the padding just like the native * caret does, and not at the edge of <figcaption>. */
   /* * Make sure the selected inline image always stays on top of its siblings. * See https://github.com/ckeditor/ckeditor5/issues/9108. */
   /* The inline image nested in the table should have its original size if not resized. See https://github.com/ckeditor/ckeditor5/issues/9117. */
}
.ck.ck-editor__editable .image > figcaption.ck-placeholder::before {
	padding-left: inherit;
	padding-right: inherit;
   /* * Make sure the image caption placeholder doesn't overflow the placeholder area. * See https://github.com/ckeditor/ckeditor5/issues/9162. */
	white-space: nowrap;
	overflow: hidden;
	text-overflow: ellipsis;
}
.ck.ck-editor__editable .image.ck-widget_selected {
	z-index: 1;
}
.ck.ck-editor__editable .image-inline.ck-widget_selected {
	z-index: 1;
   /* * Make sure the native browser selection style is not displayed. * Inline image widgets have their own styles for the selected state and * leaving this up to the browser is asking for a visual collision. */
}
.ck.ck-editor__editable .image-inline.ck-widget_selected ::selection {
	display: none;
}
.ck.ck-editor__editable td .image-inline img, .ck.ck-editor__editable th .image-inline img {
	max-width: none;
}









/* * Copyright (c) 2003-2022, CKSource Holding sp. z o.o. All rights reserved. * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license */
:root {
	--ck-image-style-spacing: 1.5em;
	--ck-inline-image-style-spacing: calc(var(--ck-image-style-spacing) / 2);
}
.image-style-block-align-left, .image-style-block-align-right {
	max-width: calc(100% - var(--ck-image-style-spacing));
}
.image-style-align-left, .image-style-align-right {
	clear: none;
}
.image-style-side {
	float: right;
	margin-left: var(--ck-image-style-spacing);
	max-width: 50%;
}
.image-style-align-left {
	float: left;
	margin-right: var(--ck-image-style-spacing);
}
.image-style-align-center {
	margin-left: auto;
	margin-right: auto;
}
.image-style-align-right {
	float: right;
	margin-left: var(--ck-image-style-spacing);
}
.image-style-block-align-right {
	margin-right: 0;
	margin-left: auto;
}
.image-style-block-align-left {
	margin-left: 0;
	margin-right: auto;
}
p + .image-style-align-left, p + .image-style-align-right, p + .image-style-side {
	margin-top: 0;
}
.image-inline.image-style-align-left, .image-inline.image-style-align-right {
	margin-top: var(--ck-inline-image-style-spacing);
	margin-bottom: var(--ck-inline-image-style-spacing);
}
.image-inline.image-style-align-left {
	margin-right: var(--ck-inline-image-style-spacing);
}
.image-inline.image-style-align-right {
	margin-left: var(--ck-inline-image-style-spacing);
}
.ck.ck-splitbutton {
   /* The button should display as a regular drop-down if the action button is forced to fire the same action as the arrow button. */
}
.ck.ck-splitbutton.ck-splitbutton_flatten:hover > .ck-splitbutton__action:not(.ck-disabled), .ck.ck-splitbutton.ck-splitbutton_flatten.ck-splitbutton_open > .ck-splitbutton__action:not(.ck-disabled), .ck.ck-splitbutton.ck-splitbutton_flatten:hover > .ck-splitbutton__arrow:not(.ck-disabled), .ck.ck-splitbutton.ck-splitbutton_flatten.ck-splitbutton_open > .ck-splitbutton__arrow:not(.ck-disabled), .ck.ck-splitbutton.ck-splitbutton_flatten:hover > .ck-splitbutton__arrow:not(.ck-disabled):not(:hover), .ck.ck-splitbutton.ck-splitbutton_flatten.ck-splitbutton_open > .ck-splitbutton__arrow:not(.ck-disabled):not(:hover) {
	background-color: var(--ck-color-button-on-background);
}
.ck.ck-splitbutton.ck-splitbutton_flatten:hover > .ck-splitbutton__action:not(.ck-disabled)::after, .ck.ck-splitbutton.ck-splitbutton_flatten.ck-splitbutton_open > .ck-splitbutton__action:not(.ck-disabled)::after, .ck.ck-splitbutton.ck-splitbutton_flatten:hover > .ck-splitbutton__arrow:not(.ck-disabled)::after, .ck.ck-splitbutton.ck-splitbutton_flatten.ck-splitbutton_open > .ck-splitbutton__arrow:not(.ck-disabled)::after, .ck.ck-splitbutton.ck-splitbutton_flatten:hover > .ck-splitbutton__arrow:not(.ck-disabled):not(:hover)::after, .ck.ck-splitbutton.ck-splitbutton_flatten.ck-splitbutton_open > .ck-splitbutton__arrow:not(.ck-disabled):not(:hover)::after {
	display: none;
}
.ck.ck-splitbutton.ck-splitbutton_flatten.ck-splitbutton_open:hover > .ck-splitbutton__action:not(.ck-disabled), .ck.ck-splitbutton.ck-splitbutton_flatten.ck-splitbutton_open:hover > .ck-splitbutton__arrow:not(.ck-disabled), .ck.ck-splitbutton.ck-splitbutton_flatten.ck-splitbutton_open:hover > .ck-splitbutton__arrow:not(.ck-disabled):not(:hover) {
	background-color: var(--ck-color-button-on-hover-background);
}


